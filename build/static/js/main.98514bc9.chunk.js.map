{"version":3,"sources":["TodoInput/todoInput.js","TodoItem/todoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","type","value","this","props","content","onChange","changeTitle","bind","onKeyPress","submit","e","key","onSubmit","React","Component","TodoItem","todo","id","App","state","newTodo","todoList","event","push","title","target","status","delated","setState","todos","map","item","index","className","addTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAoBeA,G,6LAhBP,OACI,2BAAOC,KAAK,OAAOC,MAAOC,KAAKC,MAAMC,QACrCC,SAAUH,KAAKI,YAAYC,KAAKL,MAChCM,WAAYN,KAAKO,OAAOF,KAAKL,U,6BAI9BQ,GACQ,UAARA,EAAEC,KACDT,KAAKC,MAAMS,SAASF,K,kCAGhBA,GACRR,KAAKC,MAAME,SAASK,O,GAfJG,IAAMC,YCSfC,E,iLALP,OACI,6BAAMb,KAAKC,MAAMa,U,GALNH,IAAMC,WCKzBG,G,MAAK,G,IA0DMC,E,YAnDb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJK,E,qEAOXC,GACNpB,KAAKiB,MAAME,SAASE,KAAK,CACvBN,GAdJA,GAAM,EAeFO,MAAOF,EAAMG,OAAOxB,MACpByB,OAAQ,KACRC,SAAS,IAEXzB,KAAK0B,SAAS,CACZR,QAAS,GACTC,SAAUnB,KAAKiB,MAAME,a,kCAGbC,GACVpB,KAAK0B,SAAS,CACZR,QAAQE,EAAMG,OAAOxB,MACrBoB,SAASnB,KAAKiB,MAAME,a,+BAItB,IAAIQ,EAAQ3B,KAAKiB,MAAME,SAASS,KAAI,SAACC,EAAMC,GACzC,OACE,wBAAIrB,IAAKqB,GACP,kBAAC,EAAD,CAAUhB,KAAMe,EAAKP,YAI3B,OACE,yBAAKS,UAAU,OACb,wDACA,yBAAKA,UAAU,gBACZ,kBAAC,EAAD,CACD7B,QAASF,KAAKiB,MAAMC,QACpBf,SAAUH,KAAKI,YAAYC,KAAKL,MAChCU,SAAUV,KAAKgC,QAAQ3B,KAAKL,SAE9B,4BACG2B,Q,GA5COhB,IAAMC,WCDJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98514bc9.chunk.js","sourcesContent":["import React from 'react'\n\nclass TodoInput extends React.Component {\n    render() {\n        return (\n            <input type='text' value={this.props.content}//去掉default\n            onChange={this.changeTitle.bind(this)}   \n            onKeyPress={this.submit.bind(this)}\n            />\n        )\n    }\n    submit(e){\n        if(e.key==='Enter'){\n            this.props.onSubmit(e)\n        }\n    }\n    changeTitle(e){\n        this.props.onChange(e)\n    }\n}\nexport default TodoInput","import React from 'react'\n\nclass TodoItem extends React.Component {\n    \n    render() {\n       \n        return (\n            <div>{this.props.todo}</div>\n        )\n    }\n}\nexport default TodoItem","import React from 'react';\nimport './App.css';\nimport './reset.css';\nimport TodoInput from './TodoInput/todoInput';\nimport TodoItem from './TodoItem/todoItem';\nimport 'normalize.css';\n\nlet id = 0\nfunction idMaker() {\n  id += 1\n\n  return id\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: []\n    }\n  }\n  addTodo(event) {\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      delated: false,\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n  changeTitle(event){\n    this.setState({\n      newTodo:event.target.value,\n      todoList:this.state.todoList\n    })\n  }\n  render() {\n    let todos = this.state.todoList.map((item, index) => {\n      return (\n        <li key={index}>\n          <TodoItem todo={item.title} />\n        </li>\n      )\n    })\n    return (\n      <div className='App'>\n        <h1>我的任务</h1>\n        <div className='inputWrapper'>\n          {<TodoInput \n          content={this.state.newTodo} \n          onChange={this.changeTitle.bind(this)}   \n          onSubmit={this.addTodo.bind(this)} />/*此处必须绑定this*/}\n        </div>\n        <ol>\n          {todos}\n        </ol>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}